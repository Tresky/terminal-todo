#!/bin/bash

# If the cache folder doesn't exist, create it
HOME=~/.todo
if [ ! -d "$HOME" ]; then
  mkdir $HOME
fi

if [ ! -f "$HOME/.data.txt" ]; then
  touch "$HOME/.data.txt"
fi

function listExists {
  if [[ -n "$1" && -f "$HOME/$1.txt" ]]; then
    return 0
  else
    return 1
  fi
}

function hasActive {
  res=$(grep "active:" $HOME/.data.txt)
  data=$(echo "$res" | cut -d : -f 2)
  if [ -n "$data" ]; then
    return 0 # true
  else
    return 1 # false
  fi
}

# Create a new, empty todo list
# \param $1 Name of the list
function init {
  if [[ -n "$1" && ! -f "$HOME/$1.txt" ]]; then
    touch "$HOME/$1.txt"
    echo "Initialized list: $1"
  else
    echo "Cannot initialize with this name"
  fi
}

# Delete a todo list that currently exists
# \param $1 Name of the list to delete
function delete {
  if [[ -n "$1" && -f "$HOME/$1.txt" ]]; then
    rm "$HOME/$1.txt"
  else
    echo "No todo list exists for this name"
  fi
}

# Two modes of operation:
#   1) List all todo lists (no params)
#   2) List all items in a specific todo list (1 param)
# \param $1 Name of list to list items in
function list {
  if [ -n "$1" ]; then
    # Secondary argument, so list todos in a list
    out=$(cat "$HOME/$1.txt")
    if [ -n "$out" ]; then
      echo "Todos for $1"
      i=1
      while read p; do
        echo "$i - $p"
        i=$((i + 1))
      done <"$HOME/$1.txt"
    else
      echo "No todos in this list"
    fi
  else
    # No secondary argument, so list the lists
    echo "All Todo Lists"
    echo "--------------"
    ls -1 "$HOME" | sed -e 's/\.txt$//'
  fi
}

# Add a todo item to a given list
# \param $1 List to add to
# \param $2 Item to add to the list
function add {
  if [ -n "$1" ]; then
    if [ -n "$2" ]; then
      printf "[ ] $2\n" | cat >> $HOME/$1.txt
      list "$1"
    else
      echo "Todo item not specified"
    fi
  else
    echo "List not specified"
  fi
}

# Clear a given todo list
function clear {
  if [[ -n "$1" && -f "$HOME/$1.txt" ]]; then
    rm "$HOME/$1.txt" && touch "$HOME/$1.txt"
  else
    echo "No todo list exists for this name"
  fi
}

# Mark an item in a list as "completed".
# \param $1 List to look in
# \param $2 Number identifying the item to mark
function comp {
  if [[ -n "$1" && -f "$HOME/$1.txt" ]]; then
    lc=$(($(grep -c '' "$HOME/$1.txt")+1)) # Line count
    if [[ -n $2 && $2 -lt $lc ]]; then
      cat "$HOME/$1.txt" | sed -e "$2s/\[.\]/\[x\]/" > "$HOME/temp.txt"
      mv "$HOME/temp.txt" "$HOME/$1.txt"
      list "$1"
    else
      echo "No item with this number in list: $1"
    fi
  else
    echo "No todo list exists for this name"
  fi
}

# Mark an item in a list as "not completed".
# \param $1 List to look in
# \param $2 Number identifying the item to un-mark
function undo {
  if [[ -n "$1" && -f "$HOME/$1.txt" ]]; then
    lc=$(($(grep -c '' "$HOME/$1.txt")+1)) # Line count
    if [[ -n $2 && $2 -lt $lc ]]; then
      cat "$HOME/$1.txt" | sed -e "$2s/\[x\]/\[ \]/" > "$HOME/temp.txt"
      mv "$HOME/temp.txt" "$HOME/$1.txt"
      list "$1"
    else
      echo "No item with this number in list: $1"
    fi
  else
    echo "No todo list exists for this name"
  fi
}

function setactive {
  if [ -n "$1" ] && listExists "$1"; then
    res=$(grep -n "active:" $HOME/.data.txt)
    line=$(echo "$res" | cut -d : -f 1)
    data=$(echo "$res" | cut -d : -f 3)
    if [ -n "$res" ]; then
      # The data line exists and needs to be edited
      cat "$HOME/.data.txt" | sed -e "${line}s/active:${data}/active:${1}/" > "$HOME/temp.txt"
      mv "$HOME/temp.txt" "$HOME/.data.txt"
    else
      # The data line does not exist and needs to be appended
      echo "active:$1" >> "$HOME/.data.txt"
    fi
    echo "Active List: $1"
    list $1
  else
    echo "List doesn't exist: $1"
  fi
}

# Remove the 'active' flag from the data file
function noactive {
  sed "/active:.*/d" "$HOME/.data.txt" > "$HOME/temp.txt"
  mv "$HOME/temp.txt" "$HOME/.data.txt"
  echo "No active lists"
}

# Decide what to do based on input
case "$1" in
  "init" | "i") init "$2" ;;
  "rm" | "r") delete "$2" ;;
  "list" | "ls") list "$2" ;;
  "add" | "a") add "$2" "$3" ;;
  "do" | "d") comp "$2" "$3" ;;
  "undo" | "u") undo "$2" "$3" ;;
  "clear" | "cls") clear "$2" ;;
esac
